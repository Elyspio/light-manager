/* tslint:disable */
/* eslint-disable */
/**
 * Api documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
import {BrightnessModel, ColorModel, LightDataModel} from '../models';

/**
 * LightControllerApi - axios parameter creator
 * @export
 */
export const LightControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} lightIp
         * @param {BrightnessModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerBrightness: async (lightIp: string, body?: BrightnessModel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lightIp' is not null or undefined
            if (lightIp === null || lightIp === undefined) {
                throw new RequiredError('lightIp', 'Required parameter lightIp was null or undefined when calling lightControllerBrightness.');
            }
            const localVarPath = `/core/lights/{lightIp}/brightness`
                .replace(`{${"lightIp"}}`, encodeURIComponent(String(lightIp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {ColorModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerColor: async (lightIp: string, body?: ColorModel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lightIp' is not null or undefined
            if (lightIp === null || lightIp === undefined) {
                throw new RequiredError('lightIp', 'Required parameter lightIp was null or undefined when calling lightControllerColor.');
            }
            const localVarPath = `/core/lights/{lightIp}/color`
                .replace(`{${"lightIp"}}`, encodeURIComponent(String(lightIp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerGet: async (lightIp: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lightIp' is not null or undefined
            if (lightIp === null || lightIp === undefined) {
                throw new RequiredError('lightIp', 'Required parameter lightIp was null or undefined when calling lightControllerGet.');
            }
            const localVarPath = `/core/lights/{lightIp}`
                .replace(`{${"lightIp"}}`, encodeURIComponent(String(lightIp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerGetAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/core/lights`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {string} preset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerPreset: async (lightIp: string, preset: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lightIp' is not null or undefined
            if (lightIp === null || lightIp === undefined) {
                throw new RequiredError('lightIp', 'Required parameter lightIp was null or undefined when calling lightControllerPreset.');
            }
            // verify required parameter 'preset' is not null or undefined
            if (preset === null || preset === undefined) {
                throw new RequiredError('preset', 'Required parameter preset was null or undefined when calling lightControllerPreset.');
            }
            const localVarPath = `/core/lights/{lightIp}/preset/{preset}`
                .replace(`{${"lightIp"}}`, encodeURIComponent(String(lightIp)))
                .replace(`{${"preset"}}`, encodeURIComponent(String(preset)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {boolean} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerSwitch: async (lightIp: string, state?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lightIp' is not null or undefined
            if (lightIp === null || lightIp === undefined) {
                throw new RequiredError('lightIp', 'Required parameter lightIp was null or undefined when calling lightControllerSwitch.');
            }
            const localVarPath = `/core/lights/{lightIp}/switch`
                .replace(`{${"lightIp"}}`, encodeURIComponent(String(lightIp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {boolean} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerSwitchAll: async (state?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/core/lights/switch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerToggle: async (lightIp: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'lightIp' is not null or undefined
            if (lightIp === null || lightIp === undefined) {
                throw new RequiredError('lightIp', 'Required parameter lightIp was null or undefined when calling lightControllerToggle.');
            }
            const localVarPath = `/core/lights/{lightIp}/toggle`
                .replace(`{${"lightIp"}}`, encodeURIComponent(String(lightIp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LightControllerApi - functional programming interface
 * @export
 */
export const LightControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} lightIp
         * @param {BrightnessModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lightControllerBrightness(lightIp: string, body?: BrightnessModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LightDataModel>> {
            const localVarAxiosArgs = await LightControllerApiAxiosParamCreator(configuration).lightControllerBrightness(lightIp, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {ColorModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lightControllerColor(lightIp: string, body?: ColorModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LightDataModel>> {
            const localVarAxiosArgs = await LightControllerApiAxiosParamCreator(configuration).lightControllerColor(lightIp, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lightControllerGet(lightIp: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LightDataModel>> {
            const localVarAxiosArgs = await LightControllerApiAxiosParamCreator(configuration).lightControllerGet(lightIp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lightControllerGetAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LightDataModel>>> {
            const localVarAxiosArgs = await LightControllerApiAxiosParamCreator(configuration).lightControllerGetAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {string} preset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lightControllerPreset(lightIp: string, preset: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LightDataModel>> {
            const localVarAxiosArgs = await LightControllerApiAxiosParamCreator(configuration).lightControllerPreset(lightIp, preset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {boolean} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lightControllerSwitch(lightIp: string, state?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LightDataModel>> {
            const localVarAxiosArgs = await LightControllerApiAxiosParamCreator(configuration).lightControllerSwitch(lightIp, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {boolean} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lightControllerSwitchAll(state?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LightDataModel>>> {
            const localVarAxiosArgs = await LightControllerApiAxiosParamCreator(configuration).lightControllerSwitchAll(state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} lightIp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async lightControllerToggle(lightIp: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LightDataModel>> {
            const localVarAxiosArgs = await LightControllerApiAxiosParamCreator(configuration).lightControllerToggle(lightIp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LightControllerApi - factory interface
 * @export
 */
export const LightControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @param {string} lightIp
         * @param {BrightnessModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerBrightness(lightIp: string, body?: BrightnessModel, options?: any): AxiosPromise<LightDataModel> {
            return LightControllerApiFp(configuration).lightControllerBrightness(lightIp, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} lightIp
         * @param {ColorModel} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerColor(lightIp: string, body?: ColorModel, options?: any): AxiosPromise<LightDataModel> {
            return LightControllerApiFp(configuration).lightControllerColor(lightIp, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} lightIp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerGet(lightIp: string, options?: any): AxiosPromise<LightDataModel> {
            return LightControllerApiFp(configuration).lightControllerGet(lightIp, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerGetAll(options?: any): AxiosPromise<Array<LightDataModel>> {
            return LightControllerApiFp(configuration).lightControllerGetAll(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} lightIp
         * @param {string} preset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerPreset(lightIp: string, preset: string, options?: any): AxiosPromise<LightDataModel> {
            return LightControllerApiFp(configuration).lightControllerPreset(lightIp, preset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} lightIp
         * @param {boolean} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerSwitch(lightIp: string, state?: boolean, options?: any): AxiosPromise<LightDataModel> {
            return LightControllerApiFp(configuration).lightControllerSwitch(lightIp, state, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {boolean} [state]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerSwitchAll(state?: boolean, options?: any): AxiosPromise<Array<LightDataModel>> {
            return LightControllerApiFp(configuration).lightControllerSwitchAll(state, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} lightIp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        lightControllerToggle(lightIp: string, options?: any): AxiosPromise<LightDataModel> {
            return LightControllerApiFp(configuration).lightControllerToggle(lightIp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LightControllerApi - object-oriented interface
 * @export
 * @class LightControllerApi
 * @extends {BaseAPI}
 */
export class LightControllerApi extends BaseAPI {
    /**
     *
     * @param {string} lightIp
     * @param {BrightnessModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightControllerApi
     */
    public lightControllerBrightness(lightIp: string, body?: BrightnessModel, options?: any) {
        return LightControllerApiFp(this.configuration).lightControllerBrightness(lightIp, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} lightIp
     * @param {ColorModel} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightControllerApi
     */
    public lightControllerColor(lightIp: string, body?: ColorModel, options?: any) {
        return LightControllerApiFp(this.configuration).lightControllerColor(lightIp, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} lightIp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightControllerApi
     */
    public lightControllerGet(lightIp: string, options?: any) {
        return LightControllerApiFp(this.configuration).lightControllerGet(lightIp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightControllerApi
     */
    public lightControllerGetAll(options?: any) {
        return LightControllerApiFp(this.configuration).lightControllerGetAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} lightIp
     * @param {string} preset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightControllerApi
     */
    public lightControllerPreset(lightIp: string, preset: string, options?: any) {
        return LightControllerApiFp(this.configuration).lightControllerPreset(lightIp, preset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} lightIp
     * @param {boolean} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightControllerApi
     */
    public lightControllerSwitch(lightIp: string, state?: boolean, options?: any) {
        return LightControllerApiFp(this.configuration).lightControllerSwitch(lightIp, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {boolean} [state]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightControllerApi
     */
    public lightControllerSwitchAll(state?: boolean, options?: any) {
        return LightControllerApiFp(this.configuration).lightControllerSwitchAll(state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} lightIp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LightControllerApi
     */
    public lightControllerToggle(lightIp: string, options?: any) {
        return LightControllerApiFp(this.configuration).lightControllerToggle(lightIp, options).then((request) => request(this.axios, this.basePath));
    }
}
